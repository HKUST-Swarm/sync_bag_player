"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class PlayerStats(object):
    __slots__ = ["drone_id", "system_time", "played_time_sys", "played_time_bag", "rate", "bag_time_abs", "token"]

    __typenames__ = ["int32_t", "double", "double", "double", "double", "double", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.drone_id = 0
        self.system_time = 0.0
        self.played_time_sys = 0.0
        self.played_time_bag = 0.0
        self.rate = 0.0
        self.bag_time_abs = 0.0
        self.token = 0

    def encode(self):
        buf = BytesIO()
        buf.write(PlayerStats._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">idddddi", self.drone_id, self.system_time, self.played_time_sys, self.played_time_bag, self.rate, self.bag_time_abs, self.token))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != PlayerStats._get_packed_fingerprint():
            raise ValueError("Decode error")
        return PlayerStats._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = PlayerStats()
        self.drone_id, self.system_time, self.played_time_sys, self.played_time_bag, self.rate, self.bag_time_abs, self.token = struct.unpack(">idddddi", buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if PlayerStats in parents: return 0
        tmphash = (0x52a8a9cce198373e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if PlayerStats._packed_fingerprint is None:
            PlayerStats._packed_fingerprint = struct.pack(">Q", PlayerStats._get_hash_recursive([]))
        return PlayerStats._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", PlayerStats._get_packed_fingerprint())[0]

